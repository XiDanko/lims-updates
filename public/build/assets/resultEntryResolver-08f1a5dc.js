const R=()=>{const u=s=>s.results.find(a=>a.isSelected),o=(s,a)=>s.test.referenceRanges.find(e=>e.machineId===u(s).machineId&&e.parameterId===a.id),c=(s,a,e)=>{const t=o(s,a);if(!t)return null;const r=t.ranges.filter(l=>l.type===e);if(r.length===0)return null;let n="";return r.forEach((l,d)=>{d>0&&(n+=" , "),l.operator==="<>"?n+=`${l.value} ${l.interpretation}`:n+=`${l.operator} ${l.value} ${l.interpretation}`}),n},i=(s,a,e)=>{const t=o(s,a);return t?t.ranges.find(r=>r.type===e):null};return{getReferenceRange:o,getReferenceRangeUnit:(s,a)=>{const e=o(s,a);return e?e.unit:"undefined"},getFormattedRanges:c,getRange:i,getResultAsToNormalRange:(s,a,e)=>{const t=i(s,a,"normal");if(!e||!t)return null;if(t.operator==="<>"){let[r,n]=t.value.split("-");r=parseFloat(r),n=parseFloat(n);const l=parseFloat(e);return isNaN(l)||isNaN(r)||isNaN(n)?"invalid":l<r?"low":l>n?"high":"normal"}else{if(t.operator==="=")return e==t.value?"normal":"abnormal";if(t.operator===">"){const r=parseFloat(t.value),n=parseFloat(e);return isNaN(r)||isNaN(n)?"invalid":n>r?"normal":"low"}else if(t.operator==="<"){const r=parseFloat(t.value),n=parseFloat(e);return isNaN(r)||isNaN(n)?"invalid":n<r?"normal":"high"}else return null}}}},p=()=>{const u=i=>i.results.find(f=>f.isSelected);return{getSelectedResult:u,getEntry:(i,f)=>u(i).entries.find(g=>g.parameterId===f.id),getResultColor:i=>i==="normal"?"bg-emerald-500 text-white":["low","high","abnormal"].includes(i)?"bg-orange-500 text-white":i==="invalid"?"bg-red-500 text-white":""}};export{p as a,R as u};
